Answer the following questions in your answers-lab3.txt:

1>What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
In the x86 architecture, an individual handler function is typically used for each exception or interrupt to handle specific events or conditions that occur during the execution of a program. The purpose of having separate handler functions is to enable fine-grained control and specific actions in response to different exceptions and interrupts.

Here are a few reasons why individual handler functions are used:

1. **Specific Handling**: Different exceptions or interrupts represent distinct events or conditions that require specific handling. For example, a divide-by-zero exception, a page fault, or a timer interrupt all require different actions to be taken. By having individual handler functions, the system can appropriately respond to each event with the required actions.

2. **Error Reporting and Debugging**: Individual handler functions allow for detailed error reporting and debugging. When an exception or interrupt occurs, the handler function can collect relevant information about the state of the system, such as registers, memory contents, or stack traces. This information can be logged or used for troubleshooting purposes.

3. **Modularity and Extensibility**: Having separate handler functions enhances the modularity and extensibility of the system. New exceptions or interrupts can be easily added by implementing additional handler functions without affecting the existing code. This modular approach simplifies maintenance and allows for independent development and testing of exception or interrupt handling routines.

4. **Exception/Interrupt Specific Actions**: Different exceptions or interrupts may require specific actions to be taken, such as error recovery, resource cleanup, or context switching. Individual handler functions provide a convenient way to encapsulate the logic related to these actions, making the code more organized and maintainable.

5. **Interrupt Nesting and Prioritization**: Individual handler functions enable interrupt nesting and prioritization. When an interrupt occurs while another interrupt is being processed, the system can prioritize and handle the interrupts based on their specific handler functions. This allows for proper handling of time-critical or high-priority interrupts.

Overall, having individual handler functions for each exception or interrupt in the x86 architecture allows for precise control, error handling, modular design, and tailored responses to different events or conditions that occur during program execution.


2> Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is interrupt vector 14)?

The General Protection Fault exception handler is responsible for handling the violation of the protection mechanism and taking appropriate actions, such as terminating the offending process or performing error recovery.
